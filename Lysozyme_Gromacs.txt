Summary .txt file of all GROMACS commands and explantion for the simulation
of Lysozyme in a box of water.

1) Activate GROMACS Environment:
$ source /usr/local/gromacs/bin/GMXRC

2) Remove crystalline water from .pdb file
$ grep -v HOH 1aki.pdb > 1AKI_clean.pdb
- Remove water molecules (HOH) in the PDB file
- PDB file shows the protein crystal structure from X-ray crystallography
  data

3) Generate topology, position restrain, and post-processed .gro struct file
$ gmx pdb2gmx -f 1AKI_clean.pdb -o 1AKI_processed.gro -water spce
- From PDB file, generate molecule topology, position restraint file,
  post-processed structure file
- -water: select water model - select, none, spc, spce, tip3p, tip4p, tip5p,
                               tips3p

4) `topol.top` topology file
    #include "oplssa.ff/forcefield.itp"
        ; i.e defines the force field, which live in
        ; These live in `/home/jsheppard/bin/gromacs/share/gromacs/top/`
    [ moleculetype ]:
        ; Name       nrexcl
        Protein_A    3
    [ atoms ]
    ;   nr       type  resnr residue  atom   cgnr     charge       mass  typeB    chargeB      massB
    ; residue   1 LYS rtp LYSH q +2.0
         1   opls_287      1   LYS       N      1       -0.3    14.0067   ; qtot -0.3
         2   opls_290      1   LYS      H1      1       0.33      1.008   ; qtot 0.03
         3   opls_290      1   LYS      H2      1       0.33      1.008   ; qtot 0.36
         4   opls_290      1   LYS      H3      1       0.33      1.008   ; qtot 0.69
         5  opls_293B      1   LYS      CA      1       0.25     12.011   ; qtot 0.94
         6   opls_140      1   LYS      HA      1       0.06      1.008   ; qtot 1
    ; Include Position restraint file
    #ifdef POSRES
	#include "posre.itp"
	#endif

	; Include water topology
	#include "oplsaa.ff/spce.itp"

	#ifdef POSRES_WATER
	; Position restraint for each water oxygen
	[ position_restraints ]
	;  i funct       fcx        fcy        fcz
	   1    1       1000       1000       1000
	#endif
	; i.e, water position restrained with a force constant k_pr = 1000 kJ/mol/nm^2
	
	; Include generic topology for ions
	#include "oplsaa.ff/ions.itp"

	[ system ]
	; Name
	LYSOZYME

	[ molecules ]
	; Compound        #mols
	Protein_A           1
	; NB: Order here must EXACTLY match that in .gro file
	;     And names must match those under `[ moleculetype ]`

5) Define box with `gmx editconf`
$ gmx editconf -f 1AKI_processed.gro -o 1AKI_newbox.gro -c -d 1.0 -bt cubic
- -c: center protein in box
- -d 1.0: protein at least 1 nm from box edge
    - Very important when using periodic BCs - protein should never see it's
      image
- -bt cubic: box type = cube
- -f: .gro input file (i.e that generated from cleaned .pdb file)
- -o: 1AKI_newbox.gro (output .gro file)

6) Fill box with solvent using `gmx solvate`
$ gmx solvate -cp 1AKI_newbox.gro -cs spc216.gro -o 1AKI_solv.gro -p topol.top
- -cp: configuration of protein, defined in box from previous step
- -cs: solvent configuration, generic equilibrated 3-point solvent model
       lives in `/home/jsheppard/bin/gromacs/share/gromacs/top/spc216.gro`
           Good for SPC, SPC/E, or TIP3P water (all 3-point water models)
-o: output .gro file
-p: topology file to modify - adds the number of water molecules to the
[ molecules ] section of .top file, i.e:
    [ molecules ]
    ; Compound  #mols
    Protein_A       1 
    SOL         10832 

7) Add ions:
- Neutralizing the +8e charge of the protein (found from output of `pdfb2gmx`)
- Use `gmx genion` to add ions
    - Uses run input file, `*.tpr`, generated from `gmx grompp` (GROMACS
      pre-processor) which reads the coordinate file, topology file, and
      molecular dynamics parameter file, `*.mdp`.
- Assemble `.tpr` file:
$ gmx grompp -f ions.mdp -c 1AKI_solv.gro -p topol.top -o ions.tpr
- -f: path to .mdp file
- -c: path to .gro file
- -p: path to .top file
- -o: path to output .tpr file

- Generate ions from the "atomic-level description":
$ gmx genion -s ions.tpr -o 1AKI_solv_ions.gro -p topol.top -pname NA -nname CL -neutral
- -s: path to .tpr file generated by grompp
- -o: output .gro file with ions
- -p: path to .top file to modify
- -pname/-nname: names of positive/negative ions
- .top file modified as follows:
    [ molecules ]
    ; Compound      #mols
    Protein_A         1
    SOL           10636
    CL                8

8) Minimize Energy:
- Assemble binary .tpr file using `grompp` and an energy minimization .mdp file.
$ gmx grompp -f minim.mdp -c 1AKI_solv_ions.gro -p topol.top -o em.tpr
- Carry out energy minimization using `gmx mdrun`
$ gmx mdrun -v -deffnm em
- -v: Verbose, print progress
- deffnm: Defines filesnames for input output, thus should already have em.tpr
          and will generate:
    - em.log: test log file
    - em.edr: binary energy file
    - em.trr: binary full precision trajectory
    - em.gro: energy minimized structure

9) Generate .xvg file to visualize energy minimization:
$ gmx energy -f em.edr -o potential.xvg
- -f: path to .edr file
- -o: path to output .xvg file (data file in plain text)
$ 10 0
- Prompt: 10 -> Potential, 0 -> terminate input

10) Equilibrate at constant NVT:
$ gmx grompp -f nvt.mdp -c em.gro -r em.gro -p topol.top -o nvt.tpr
- -r: Points to same gromacs .gro structure file as -c
- From nvt.mdp:
    - gen_vel = yes: initiate velocity generation. With different random seeds
                     (gen_seed), can have different initial velocities to run
                     multiple sims from the same starting structure
    - tcoupl = V-rescale: Velocity rescaling thermostate - better than
                          Berendsen weak coupling method
    - pcoupl = np: Pressure coupling not applied
$ gmx mdrun -deffnm nvt

11) Check temperature progression, again with `gmx energy`:
$ gmx energy -f nvt.edr -o temperature.xvg
16 0
- Prompt: 16 -> Temperature

12) Equilibrate ay constant NPT:
- Previosly stabilized the temperature, now stabilize presure (and thus also the
  density)
$ gmx grompp -f npt.mdp -c nvt.gro -r nvt.gro -t nvt.cpt -p topol.top -o npt.tpr
- -t: include checkpoint file nvt.cpt - generatured during step 10 - includes
      necessary state vars to continue sim
- From npt.mdp:
    - continuation = yes: continuing sim from NVT equib phase
    - gen_vel = no: Velocities read from the trajectory
$ gmx mdrun -deffnm npt

13) Check pressure progression:
$ gmx energy -f npt.edr -o pressure.xvg
18 0
- Prompt: 18 -> Pressure

14) Check density progression:
$ gmx energy -f npt.edr -o density.xvg
24 0
- Prompt: 24 -> Density

15) Production MD Run:
- Similar to transition from NVT to NPT, i.e use now system at desired T and P
- Release position restraints and run production MD for data collection, this
  time using NPT equib as checkpoint
- Define simulation time = 1 ns in md.mdp file
$ gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -o md_0_1.tpr
- Prints estimate for PME load -> dictates # processors dedicated to the PME
  calc and # of PP calcs.
- Execute MD run:
$ gmx mdrun -deffnm md_0_1
- GPU available? Add -nb gpu

16) Correct for periodicity:
- trjconv can also strip out coordinates or manually alter the trajectory
$ gmx trjconv -s md_0_1.tpr -f md_0_1.xtc -o md_0_1_noPBC.xtc -pbc mol -center
1
- Prompt: 1 -> "Protein", group to be centered
0
- Prompt: 0 -> "System", for output
- -s: Path to .tpr or .gro structure file
- -f: Path to input .xtc trajectory file (generated from `gmx mdrun`
      (production)
- -o: Path to output .xtc trajectory file
- -pbc: PBC treatment, here using "mol"
- -center: center atoms in box

17) Check stuctural stability of protein using GROMACS RMSD calculation
    tool, `gmx rms`
$ gmx rms -s md_0_1.tpr -f md_0_1_noPBC.xtc -o rmsd.xvg -tu ns
4 4
- Prompt: 4 -> "Backbone" for least-squares fit, 4 -> "Group" for
  RMSD calculation
- RMSD calculated relative to structure present in the minimized, equilibrated
  system
- -tu: time unit = ns for output rmsd.xvg file
- -s: path to structure+mass(db) .tpr file, i.e that generated from grompp for
      the production MD run
- -f: path to input trajectory .xtc file
- -o: output .xvg file
$ gmx rms -s em.tpr -f md_0_1_noPBC.xtc -o rmsd_xtal.xvg -tu ns
- Calculates RMSD relative to the energy-minimized crystal stucture, that
  defined in emp.tpr

18) Calculate radius of gyration - measure of protein compactness
    - Stable fold -> steady value of Rg
    - Protein unfolds -> Rg changes with time
$ gmx gyrate -s md_0_1.tpr -f md_0_1_noPBC.xtc -o gyrate.xvg
1
- Prompt: 1 -> "Protein"
-s: path to structure+mas(db) .tpr file, that generated by grompp for
    production md run
-f: path to input trajectory .xtc file
-o: output .xvg file
